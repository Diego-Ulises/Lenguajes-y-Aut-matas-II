PARSER_BEGIN(Practica1)
/** Simple brace matcher. */
public class Practica1 {
  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Practica1 parser = new Practica1(System.in);
    parser.Inicial();
    System.out.println("F");
  }
}
PARSER_END(Practica1)
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}
TOKEN :
{
<OPMENI: "<="> |
<OPMAYI: ">="> |
<OPMAY: ">"> |
<OPMEN: "<"> |
<OPDIF: "!="> |
<OPNOT: "!"> |
<OPCOMP: "=="> |
<OPIG: "="> |
<OPSUM: "+"> |
<OPMUL: "*"> |
<OPRES: "-"> |
<OPDIV: "/"> |
<OPMOD: "%"> |
<OPPOT: "^"> |
<OPAND: "&&"> |
<OPOR: "||"> |
<ENTERO: ("0" | ["1"-"9"](<DIGDEC>)*)>|
<DIGDEC: ["0"-"9"]>|
<ID: <LETRA> (<LETRA> | <DIGDEC> | "_")* > |
<LETRA: (["a"-"z"]|["A"-"Z"])>
}
/** Root production. */
void Inicial() :
{}
{
   (A())+ <EOF>
}
void A() :
{}
{
    B() Ap()
}
void Ap() : //SUMA
{}
{
  [(<OPSUM> | <OPRES>) B() Ap()] 
}

void B() :
{}
{
  C() Bp()
}

void Bp() : //MULTIPLICACION
{}
{
  [(<OPMUL> | <OPDIV> | <OPMOD> | <OPPOT>) C() Bp() ] 
}
void C():
{}
{
  D() Cp()
}

void Cp() : //COMPARACION
{}
{
  [(<OPMENI> | <OPMAYI> | <OPMEN> | <OPMAY> | <OPDIF> | <OPCOMP>) D() Cp()]
}

void D() : 
{}
{
  E() Dp()
}

void Dp() : //LOGICOS
{}
{
  [(<OPNOT> | <OPAND> | <OPOR>) E() Dp()]
}

void E() : //ASIGNACION
{}
{
  F() Ep()
}

void Ep() :
{}
{
  [(<OPIG>) F() Ep()]
}
 

void F() :
{}
{
    <ENTERO> | <ID> | "(" A() ")"
}
